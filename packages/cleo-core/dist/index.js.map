{
  "version": 3,
  "sources": ["../src/loaders/ReactLoader.tsx", "../src/WebComponentContainer.ts", "../src/router/index.ts", "../src/elements/NavLink.ts"],
  "sourcesContent": ["import React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { WebComponentContainer } from '../WebComponentContainer';\n\nclass ReactLoader {\n  constructor(name, Component, template = document.createElement('div')) {\n    const TagName = name;\n    template.classList.add(name + '-container');\n\n    class ReactComponent extends WebComponentContainer {\n      connectedCallback() {\n        this.attachShadow({ mode: 'open' }).appendChild(template);\n        ReactDOM.render(Component, template);\n      }\n    }\n    customElements.define(TagName, ReactComponent);\n  }\n}\n\nexport default ReactLoader;\n", "import React from 'react';\n\nexport class WebComponentContainer extends HTMLElement {\n\n  constructor(){\n    super();\n    console.log('DEBUG:Mounted')\n  }\n}\n\nexport const createContainer = (name: string) => {\n  customElements.define(name, WebComponentContainer)  \n}\n", "import ComponentRegistry from \"./registry\";\n\nexport class Router {\n  routes;\n  setRoute;\n  static navigate;\n  constructor(routes, container) {\n    this.routes = routes;\n\n    this.setRoute = (key) => {\n\n      const routeArray = Object.entries(routes)\n\n      const route:[...any] = routeArray.find(([key, route]: [string, any]) => {\n\n        if (typeof route == 'string') {\n          if (key == window.location.pathname) return true;\n        };\n\n        if (route.includeSubroutes) {\n          if (window.location.pathname.startsWith(key)) return true;\n        }\n      });\n\n      console.log(\"DEBUG: SETROUTE\", route[1]);\n      container.innerHTML = route[1].component ? route[1].component : route[1];\n    }\n\n    Router.navigate = (pathname) => {\n      window.history.pushState({}, pathname, window.location.origin + pathname);\n      this.setRoute(pathname);\n    };\n\n    window.onpopstate = () => this.setRoute(window.location.pathname);\n    window.onload = () => this.setRoute(window.location.pathname);\n  }\n};\n", "import {Router} from '../router/index';\n\nclass NavLink extends HTMLAnchorElement {\n\n  connectedCallback() {\n    this.onclick = (e) => {\n      e.stopImmediatePropagation();\n      e.preventDefault();\n      \n      const href = this.getAttribute('href');\n      Router.navigate(href);\n    }\n  }\n  \n}\n\nexport default customElements.define('nav-link', NavLink, { \n  extends: \"a\" \n});"],
  "mappings": ";AACA;AAAA;AAAA;;;ACCO,0CAAoC,YAAY;AAAA,EAErD,cAAa;AACX;AACA,YAAQ,IAAI;AAAA;AAAA;;;ADFhB,wBAAkB;AAAA,EAChB,YAAY,MAAM,WAAW,WAAW,SAAS,cAAc,QAAQ;AACrE,UAAM,UAAU;AAChB,aAAS,UAAU,IAAI,OAAO;AAE9B,iCAA6B,sBAAsB;AAAA,MACjD,oBAAoB;AAClB,aAAK,aAAa,EAAE,MAAM,UAAU,YAAY;AAChD,QAAS,OAAO,WAAW;AAAA;AAAA;AAG/B,mBAAe,OAAO,SAAS;AAAA;AAAA;AAInC,IAAO,sBAAQ;;;AEjBR,mBAAa;AAAA,EAIlB,YAAY,QAAQ,WAAW;AAC7B,SAAK,SAAS;AAEd,SAAK,WAAW,CAAC,QAAQ;AAEvB,YAAM,aAAa,OAAO,QAAQ;AAElC,YAAM,QAAiB,WAAW,KAAK,CAAC,CAAC,MAAK,YAA0B;AAEtE,YAAI,OAAO,UAAS,UAAU;AAC5B,cAAI,QAAO,OAAO,SAAS;AAAU,mBAAO;AAAA;AAC7C;AAED,YAAI,OAAM,kBAAkB;AAC1B,cAAI,OAAO,SAAS,SAAS,WAAW;AAAM,mBAAO;AAAA;AAAA;AAIzD,cAAQ,IAAI,mBAAmB,MAAM;AACrC,gBAAU,YAAY,MAAM,GAAG,YAAY,MAAM,GAAG,YAAY,MAAM;AAAA;AAGxE,WAAO,WAAW,CAAC,aAAa;AAC9B,aAAO,QAAQ,UAAU,IAAI,UAAU,OAAO,SAAS,SAAS;AAChE,WAAK,SAAS;AAAA;AAGhB,WAAO,aAAa,MAAM,KAAK,SAAS,OAAO,SAAS;AACxD,WAAO,SAAS,MAAM,KAAK,SAAS,OAAO,SAAS;AAAA;AAAA;;;AChCxD,4BAAsB,kBAAkB;AAAA,EAEtC,oBAAoB;AAClB,SAAK,UAAU,CAAC,MAAM;AACpB,QAAE;AACF,QAAE;AAEF,YAAM,OAAO,KAAK,aAAa;AAC/B,aAAO,SAAS;AAAA;AAAA;AAAA;AAMtB,IAAO,kBAAQ,eAAe,OAAO,YAAY,SAAS;AAAA,EACxD,SAAS;AAAA;",
  "names": []
}
